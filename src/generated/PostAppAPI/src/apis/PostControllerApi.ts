/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddPostRequest,
  FilteredFindRequest,
  Post,
} from '../models';
import {
    AddPostRequestFromJSON,
    AddPostRequestToJSON,
    FilteredFindRequestFromJSON,
    FilteredFindRequestToJSON,
    PostFromJSON,
    PostToJSON,
} from '../models';

export interface AddPostOperationRequest {
    addPostRequest: AddPostRequest;
}

export interface GetByFilterRequest {
    filteredFindRequest: FilteredFindRequest;
}

export interface GetPostRequest {
    postId: number;
}

/**
 * 
 */
export class PostControllerApi extends runtime.BaseAPI {

    /**
     */
    async addPostRaw(requestParameters: AddPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Post>> {
        if (requestParameters.addPostRequest === null || requestParameters.addPostRequest === undefined) {
            throw new runtime.RequiredError('addPostRequest','Required parameter requestParameters.addPostRequest was null or undefined when calling addPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/post/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddPostRequestToJSON(requestParameters.addPostRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostFromJSON(jsonValue));
    }

    /**
     */
    async addPost(requestParameters: AddPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Post> {
        const response = await this.addPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getByFilterRaw(requestParameters: GetByFilterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Post>>> {
        if (requestParameters.filteredFindRequest === null || requestParameters.filteredFindRequest === undefined) {
            throw new runtime.RequiredError('filteredFindRequest','Required parameter requestParameters.filteredFindRequest was null or undefined when calling getByFilter.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/post/filter`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FilteredFindRequestToJSON(requestParameters.filteredFindRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PostFromJSON));
    }

    /**
     */
    async getByFilter(requestParameters: GetByFilterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Post>> {
        const response = await this.getByFilterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getLatestRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Post>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/post/latest`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PostFromJSON));
    }

    /**
     */
    async getLatest(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Post>> {
        const response = await this.getLatestRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getPostRaw(requestParameters: GetPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Post>> {
        if (requestParameters.postId === null || requestParameters.postId === undefined) {
            throw new runtime.RequiredError('postId','Required parameter requestParameters.postId was null or undefined when calling getPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/post/get/{post_id}`.replace(`{${"post_id"}}`, encodeURIComponent(String(requestParameters.postId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostFromJSON(jsonValue));
    }

    /**
     */
    async getPost(requestParameters: GetPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Post> {
        const response = await this.getPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
